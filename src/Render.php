<?php
namespace Libre3d\Render3d;

class Render {
	public $file_stl = 'test.stl';
	public $file_scad = '';
	public $bin_povray = 'povray';
	public $bin_openscad = 'openscad';

	public $dir_base, $dir_this, $file_pov, $file_inc, $file_out, $file_pov_tpl, $bin_stl2pov,
		$min, $max;
	public $width=1600, $height=1200, $silent=false, $stl2pov_ver31 = false;

	public $errors = [];

	public function process_scad_to_stl () {
		if (empty($this->file_scad)) {
			return true;
		}
		$this->validateParams();
		if ($this->silent) {
			//make sure to supress output...
			ob_start();
		}
		mkdir ($this->dir_base);
		
		$currentDir = getcwd();
		
		//we need to be in base directory for all the rendering stuff to work...
		chdir($this->dir_base);
		
		//convert using scad
		$cmd = "{$this->bin_openscad} -o \"{$this->file_stl}\" \"{$this->file_scad}\"";
		
		$this->cmd($cmd);
		//go back to normal folder
		chdir ($currentDir);
		
		if (!file_exists($this->file_stl)) {
			ob_end_clean();
			return $this->error("Error creating STL file from SCAD!  Cannot proceed.<br />$cmd");
		}
		$stl_contents = file_get_contents($this->file_stl);
		if (!strlen($stl_contents)) {
			ob_end_clean();
			return $this->error("Contents of STL file are empty...");
		}
		return true;
	}
	
	public function create_inc_file () {
		$this->validateParams();
		if ($this->silent) {
			//make sure to supress output...
			ob_start();
		}
		mkdir ($this->dir_base);
		
		$currentDir = getcwd();
		
		//we need to be in base directory for all the rendering stuff to work...
		chdir($this->dir_base);
		
		//first, attempt to convert the thingy to a pov...
		if ($this->stl2pov_ver31) {
			//newer version version
			$cmd = "{$this->bin_stl2pov} \"{$this->file_stl}\" \"{$this->file_inc}\"";
		} else {
			//Older version's version
			$cmd = "{$this->bin_stl2pov} -s \"{$this->file_stl}\" > \"{$this->file_inc}\"";
		}

		
		$this->cmd($cmd);
		//go back to normal folder
		chdir ($currentDir);
		
		if (!file_exists($this->file_inc)) {
			ob_end_clean();
			return $this->error("Error creating INC file!  Cannot proceed.<br />$cmd");
		}
		$inc_contents = file_get_contents($this->file_inc);
		if (!strlen($inc_contents)) {
			ob_end_clean();
			return $this->error("Contents of INC file are empty...");
		}
		return true;
	}
	
	public function create_pov_file () {
		/* START OF 3.1 inc FILE reference:
// Generated by stl2pov [ver. 3.1] (2012-06-04 21:17:53 +0200) on Sat Aug 31 21:56:49 2013.
// Name of the solid: 'COLOR='.
// 1932 facets, 952 unique vertices, 179 unique normal vectors.
// 3D Extents of the model (in STL units):
// -88.0009994507 ≤ x ≤ 86.2509994507,
// -3.375 ≤ y ≤ 68.0009994507,
// -0.0010000000475 ≤ z ≤ 6.0.
// 3D center (midpoint of extents, STL units): <-0.875, 32.3129997253, 2.99949999998>.
// 3D mean (mean of all vertices, STL units): <-9.16487760485, 40.7771332193, 3.12912486327>.
// The abovementioned coordinates are in the STL file's right-handed
// coordinate system, while POV-ray uses a left-handed system.
// You should swap the x and y above to get POV-ray coordinates.
# declare m_COLOR= = mesh {
  triangle { // #1
    <-3.375, 23.0, 6.0>,
    <11.625, 29.25, 6.0>,
    <10.9969997406, 27.0030002594, 6.0>
  }
*/
		
		$this->validateParams();
		if ($this->silent) {
			//make sure to supress output...
			ob_start();
		}
		$currentDir = getcwd();
		
		//we need to be in base directory for all the rendering stuff to work...
		chdir($this->dir_base);
		
		$inc_contents = file_get_contents($this->file_inc);
		if (!strlen($inc_contents)) {
			chdir ($currentDir);
			ob_end_clean();
			return $this->error("Contents of INC file are empty...");
		}
		if ($this->stl2pov_ver31) {
			//slightly different in newer version
			preg_match('|// Name of the solid: \'([^\']+)\'|', $inc_contents, $matches);
			$solidname = $matches[1];
			$modelname = 'm_'.$solidname;
		} else {
			//need to figure out the model name, which will be in the generated inc file...
			preg_match('/#declare ([^ ]+)/', $inc_contents, $matches);
			$modelname = $matches[1];
		}
		$cleanName = trim(preg_replace('/[^_a-zA-Z0-9]+/','_',$modelname), '_');
		if (empty($modelname) || empty($cleanName)) {
			chdir ($currentDir);
			ob_end_clean();
			$this->error('Shucks...  here is file:<br /><pre>'.htmlspecialchars($inc_contents).'</pre>');
			return $this->error("Error retrieving model name...  Matches: <pre>".print_r($matches,1)."</pre>");
		}

		if ($modelname !== $cleanName) {
			// Have to fix this!!!  It doesn't like certain chars in the solid name
			$inc_contents = str_replace($modelname, $cleanName, $inc_contents);

			// Update the inc file contents to re-name the object
			file_put_contents($this->file_inc, $inc_contents);
			$modelname = $cleanName;
		}
		unset($cleanName);
		
		//figure out min / max for x, y, z
		if ($this->stl2pov_ver31) {
			//3.1 version does the work for us...
			preg_match('|// ([-0-9.]+) ≤ x ≤ ([-0-9.]+),|',$inc_contents,$x_matches);
			preg_match('|// ([-0-9.]+) ≤ y ≤ ([-0-9.]+),|',$inc_contents,$y_matches);
			preg_match('|// ([-0-9.]+) ≤ z ≤ ([-0-9.]+).[\s\n]+|',$inc_contents,$z_matches);
			$this->min['x'] = $x_matches[1];
			$this->max['x'] = $x_matches[2];
			$this->min['y'] = $y_matches[1];
			$this->max['y'] = $y_matches[2];
			$this->min['z'] = $z_matches[1];
			$this->max['z'] = $z_matches[2];
		} else {
			preg_replace_callback('/<([-0-9.]+), ([-0-9.]+), ([-0-9.]+)>/', array($this,'parseCords'), $inc_contents);
			//preg_match_all('/<([-0-9.]+), ([-0-9.]+), ([-0-9.]+)>/',$inc_contents,$cord_matches);
			unset($inc_contents);
		}
		$diff['x'] = abs($this->max['x'] - $this->min['x']);
		$diff['y'] = abs($this->max['y'] - $this->min['y']);
		$diff['z'] = abs($this->max['z'] - $this->min['z']);
		
		//generate contents
		$pov_contents = file_get_contents($this->file_pov_tpl);
		if (!strlen($pov_contents)) {
			chdir ($currentDir);
			ob_end_clean();
			return $this->error('Could not get the contents of pov_layout.tmpl');
		}
		$find = $replace = array();
		
		//insert the include file...
		$find[] = '{{INCLUDE_FILE}}';
		$replace[] = $this->file_inc;
		
		//the model name
		$find[] = '{{MODELNAME}}';
		$replace[] = $modelname;
		
		//the base folder
		$find[] = '{{BASE_PATH}}';
		//NOTE: This is expecting "this folder" not the base temp folder
		$replace[] = $this->dir_this;//$this->dir_base;
		
		
		//allow us to do some stuff based on x/y/z
		$find[] = '{{X}}';
		$replace[] = $diff['x'];
		$find[] = '{{Y}}';
		$replace[] = $diff['y'];
		$find[] = '{{Z}}';
		$replace[] = $diff['z'];
		$find[] = '{{MAX}}';
		$replace[] = max($diff);
		
		//figure out what to use for the Z multipliers...
		
		//first one is for how far up (on z axis) to stick the camera...
		//default is a little above the top of the item...
		$mult = '1.2';
		
		$slope_threshold = .33;
		
		//Figure out the "run" for the slope...  it's basically a triangle...
		$x = $diff['x']*2;
		$y = $diff['y']*2;
		$z = $diff['z']*$mult;
		//so use pythagerium therum or whatever that this is we all thought we'd never use again
		//outside of high school
		//x^2 + y^2 = h^2 ... (x^2 + y^2)^0.5 = h
		$h = sqrt($x*$x + $y*$y);
		
		//now use h (hypotenuse) as the run.. and z as the rise...  See if the slope
		//is less than our threshhold
		if (($diff['z']*$mult)/$h < $slope_threshold) {
			//slope is not acceptable!  Figure out what to use a roughly 40% slope or so...
				
			//(z*mult) / h = .4 (z is "original z" pre-multiplier...) and solve for mult:
			$mult = ($h * 0.4) / $diff['z'];
		}
		
		$find[] = '{{Z_MULT}}';
		$replace[] = ''.round($mult,2);
		
		//figure out things for the grid...
		
		//This is figuring out how large to make the grid, we only want to take up a part of the floor
		//(the part that the object takes up)
		$Axes_axesSize = 100;
		$axes_mult = ceil(max($diff['x'],$diff['y']) / ($Axes_axesSize));
		
		$Axes_axesSize *= $axes_mult;
		
		$find[] = '{{Axes_axesSize}}';//100;
		$replace[] = $Axes_axesSize;
		
		$pov_contents = str_replace($find, $replace, $pov_contents);
		
		//attempt to write it to file
		if (!file_put_contents($this->file_pov, $pov_contents)) {
			chdir ($currentDir);
			ob_end_clean();
			return $this->error('Problem writing to file '.$this->file_pov);
		}
		return true;
	}
	
	public function render () {
		$this->validateParams();
		if (!file_exists($this->file_inc)) {
			//generate the inc file
			if (!$this->create_inc_file()) {
				//it failed...
				return $this->error('Could not find INC file, and creating INC file failed, cannot proceed with render.');
			}
		}
		
		if (!file_exists($this->file_pov)) {
			if (!$this->create_pov_file()) {
				//oops!
				return $this->error('POV file not found, and generating POV file failed!');
			}
		}
		
		//Now the actual conversion of POV to image...
		if ($this->silent) {
			//make sure to supress output...
			ob_start();
		}
		$currentDir = getcwd();
		
		$povInc = dirname($this->bin_povray).'/include';
		
		//+I	- input file name
		//+FN	- PNG file format
		//+W	- Width of image
		//+H	- Height of image
		//+O	- output file
		//+Qn	- image quality (0 = rough, 9 = full)
		//+AMn	- use non-adaptive (n=1) or adaptive (n=2) supersampling
		//+A0.n	- perform antialiasing (if color change is above n percent)
		//+L	- Library include directory
		$this->cmd("{$this->bin_povray} +I\"{$this->file_pov}\" +FN +W{$this->width} +H{$this->height} +O\"{$this->file_out}\" +Q9 +AM2 +A0.5 +L{$povInc}");
		
		//$this->cmd('pwd');
		//$this->cmd('ls -lah');
		
		//lastly, change back to the previous directory
		chdir ($currentDir);
		ob_end_clean();
		return true;
	}
	
	public function parseCords ($matches) {
		if (!isset($this->min['x']) || $matches[1]<$this->min['x']) {
			$this->min['x'] = $matches[1];
		}
		if (!isset($this->min['y']) || $matches[2]<$this->min['y']) {
			$this->min['y'] = $matches[2];
		}
		if (!isset($this->min['z']) || $matches[3]<$this->min['z']) {
			$this->min['z'] = $matches[3];
		}
		
		if (!isset($this->max['x']) || $matches[1]>$this->max['x']) {
			$this->max['x'] = $matches[1];
		}
		if (!isset($this->max['y']) || $matches[2]>$this->max['y']) {
			$this->max['y'] = $matches[2];
		}
		if (!isset($this->max['z']) || $matches[3]>$this->max['z']) {
			$this->max['z'] = $matches[3];
		}
		//NOTE: we are just using this as way to parse the contents...  after
		//it is done, value doesn't matter...
		return '';
	}
	
	public function validateParams ($file_stl = null) {
		//this one cannot be set outside...
		$this->dir_this = dirname(__FILE__).'/';
		if ($file_stl !== null) {
			$this->file_stl = $file_stl;
		} else if (!empty($this->file_scad)) {
			$this->file_stl = substr($this->file_scad, 0, -5).'.stl';
		}
		if (substr($this->file_stl, -5) === '.scad') {
			// actually scad file...
			$this->file_scad = $this->file_stl;
			$this->file_stl;
		}
		if (!isset($this->dir_base)) {
			$this->dir_base = str_replace('.stl','',$this->file_stl).'/';
		}
		if (!isset($this->file_pov)) {
			$this->file_pov = $this->dir_base.'temp.pov';
		}
		if (!isset($this->file_inc)) {
			$this->file_inc = $this->dir_base.'temp.inc';
		}
		if (!isset($this->file_out)) {
			$this->file_out = $this->dir_base.'temp.png';
		}
		if (!isset($this->file_pov_tpl)) {
			//should be in same folder as this file
			$this->file_pov_tpl = $this->dir_this.'pov_layout.tmpl';
		}
		if (!isset($this->bin_stl2pov)) {
			$this->bin_stl2pov = $this->dir_this.'stl2pov';
		}
		
		//just make sure the other ones are set correctly
		$this->width = (int)$this->width;
		$this->height = (int)$this->height;
	}
	
	/**
	 * Simple wrapper for running commands on command line...  Useful to easily
	 * log results to file or whatever.
	 * 
	 * @param string $command
	 */
	public function cmd ($call) {
		system ($call . " 2> {$this->dir_base}last_error.txt", $result);
		
		$errContents = trim(file_get_contents("{$this->dir_base}last_error.txt"));
		if (strlen($errContents) && !$this->silent) {
			//print it red so it's noticed
			echo "<span style='color: red;'>$errContents</span>\n";
		}
		return $result;
	}
	
	/**
	 * USeful for displaying an error and returning false.
	 * 
	 * @param string $msg
	 * @return boolean
	 */
	public function error ($msg) {
		if ($this->silent) {
			$this->errors[] = $msg;
		} else {
			echo 'Oops! '.$msg.'<br /><br />';
		}
		return false;
	}
}